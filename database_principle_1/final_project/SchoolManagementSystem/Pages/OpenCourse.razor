@page "/open"
@attribute [Authorize(Roles = Role.All)]
@inject SchoolContext _db
@inject IMessageService _message
@inject SchoolStateProvider _provider

<Divider>开课列表</Divider>

<Select @bind-Value="semester" DefaultActiveFirstOption TItem="string" TItemValue="string">
     <SelectOptions>
         @foreach (var i in _db.OpeningCourses.Select(x => x.Semester).Distinct())
        {
            <SelectOption TItem="string" TItemValue="string" Label="@i" Value="@i" />
        }
    </SelectOptions>
</Select>

<Table ScrollY="100%"
       DataSource="_db.OpeningCourses.Where(x=>x.Semester == semester)">
    <PropertyColumn Title="课程号" Property="c=>c.CourseId" />
    <PropertyColumn Title="课程名称" Property="c=>_db.GetCourseName(c.CourseId)" />
    <PropertyColumn Title="教师号" Property="c=>c.TeacherId" />
    <PropertyColumn Title="教师" Property="c=>_db.GetTeacherName(c.TeacherId)" />
    <PropertyColumn Title="上课时间" Property="c=>_db.GetCourseTime(c.CourseId, c.Semester, c.TeacherId)" />
    <AuthorizeView Roles="@Role.Upper" Context="authorize_context">
        <ActionColumn Title="编辑">
            @if (_provider.CurrentUser.Role == Role.Administrator || _provider.CurrentUser.Id == context.TeacherId)
            {
                <Popconfirm Title="要删除这个开课吗"
                            OnConfirm="() => DeleteOpenCourse(context)"
                            OkText="是"
                            CancelText="否">
                    <a>删除</a>
                </Popconfirm>
            }
        </ActionColumn>
    </AuthorizeView>
</Table>

@code {
    string semester { get; set; } = "";

    void DeleteOpenCourse(OpeningCourse entity)
    {
        _db.OpeningCourses.Remove(entity);
        _db.SaveChanges();
        _message.Success("删除成功");
    }
}
