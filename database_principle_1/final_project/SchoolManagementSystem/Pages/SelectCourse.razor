@page "/select"
@attribute [Authorize(Roles = Role.Student)]
@inject SchoolStateProvider _provider
@inject SchoolContext _db
@inject IMessageService _message

<Divider>选课</Divider>

<Select @bind-Value="semester" DefaultActiveFirstOption TItem="string" TItemValue="string">
     <SelectOptions>
         @foreach (var i in _db.OpeningCourses.Select(x => x.Semester).Distinct())
        {
            <SelectOption TItem="string" TItemValue="string" Label="@i" Value="@i" />
        }
    </SelectOptions>
</Select>

<Divider>已选课程</Divider>

<Table ScrollY="100%"
       DataSource="_db.SelectedCourses.Where(x=>x.StudentId == _provider.CurrentUser.Id && x.Semester == semester)">
    <PropertyColumn Title="课程号" Property="c=>c.CourseId" />
    <PropertyColumn Title="课程名称" Property="c=>_db.GetCourseName(c.CourseId)" />
    <PropertyColumn Title="教师号" Property="c=>c.TeacherId" />
    <PropertyColumn Title="教师" Property="c=>_db.GetTeacherName(c.TeacherId)" />
    <PropertyColumn Title="上课时间" Property="c=>_db.GetCourseTime(c.CourseId, c.Semester, c.TeacherId)" />
    <ActionColumn Title="编辑">
        <Popconfirm Title="要删选这门课吗"
                    OnConfirm="() => DeleteSelected(context)"
                    OkText="是"
                    CancelText="否">
            <a>删选</a>
        </Popconfirm>
    </ActionColumn>
</Table>

<Divider>新选课程</Divider>

<Form Model="@parameters"
      LabelColSpan="4"
      WrapperColSpan="16">
    <FormItem Label="课程号">
        <Input @bind-Value="context.CourseId" />
    </FormItem>
    <FormItem Label="课程名称">
        <Input @bind-Value="context.CourseName" />
    </FormItem>
    <FormItem Label="教师号">
        <Input @bind-Value="context.TeacherId" />
    </FormItem>
    <FormItem Label="教师名称">
        <Input @bind-Value="context.TeacherName" />
    </FormItem>
</Form>

<Table ScrollY="100%"
       DataSource="_db.OpeningCourses.Where(x=> x.Semester == semester && 
           x.CourseId.Contains(parameters.CourseId) &&
           x.TeacherId.ToString().Contains(parameters.TeacherId) &&
           (from y in _db.Teachers where y.Name.Contains(parameters.TeacherName) select y.Id).Contains(x.TeacherId) &&
           (from y in _db.Courses where y.Name.Contains(parameters.CourseName) select y.Id).Contains(x.CourseId) &&
           !(from y in _db.SelectedCourses where y.StudentId == _provider.CurrentUser.Id && y.Semester == x.Semester && y.CourseId == x.CourseId select y).Any())">
    <PropertyColumn Title="课程号" Property="c=>c.CourseId" />
    <PropertyColumn Title="课程名称" Property="c=>_db.GetCourseName(c.CourseId)" />
    <PropertyColumn Title="教师号" Property="c=>c.TeacherId" />
    <PropertyColumn Title="教师" Property="c=>_db.GetTeacherName(c.TeacherId)" />
    <PropertyColumn Title="上课时间" Property="c=>_db.GetCourseTime(c.CourseId, c.Semester, c.TeacherId)" />
    <ActionColumn Title="编辑">
        <Button Type="@ButtonType.Link" OnClick="() => AddSelectCourse(context)">选择</Button>
    </ActionColumn>
</Table>

@code {
    private class SearchParameters
    {
        public string CourseId { get; set; } = "";
        public string CourseName { get; set; } = "";
        public string TeacherId { get; set; } = "";
        public string TeacherName { get; set; } = "";
        
    }

    string semester { get; set; } = "";
    SearchParameters parameters { get; set; } = new ();

    void AddSelectCourse(OpeningCourse entity)
    {
        if (_db.SelectedCourses.Any(x => x.StudentId == _provider.CurrentUser.Id
            && x.Semester == entity.Semester
            && x.CourseId == entity.CourseId))
        {
            _message.Error("已经选择过这门课了");
            return;
        }
        var selectedTime = _db.GetCourseTime(entity.CourseId, entity.Semester, entity.TeacherId);
        var allSelectedTime = (from x in _db.SelectedCourses where x.StudentId == _provider.CurrentUser.Id &&
                                                                  x.Semester == entity.Semester
                              select _db.GetCourseTime(x.CourseId, x.Semester, x.TeacherId)).ToList();
        if (allSelectedTime.Contains(selectedTime))
        {
            _message.Error("时间冲突");
            return;
        }
        var selected = new SelectedCourse
            {
                StudentId = _provider.CurrentUser.Id,
                Semester = entity.Semester,
                CourseId = entity.CourseId,
                TeacherId = entity.TeacherId,
                Grade = null,
                Test = null,
                TotalGrade = null,
            };
        _db.SelectedCourses.Add(selected);
        _db.SaveChanges();
        _message.Success("选课成功");
    }

    void DeleteSelected(SelectedCourse entity)
    {
        _db.SelectedCourses.Remove(entity);
        _db.SaveChanges();
        _message.Success("删选成功");
    }
}
