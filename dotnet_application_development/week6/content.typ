#let week = 6
#let experiments = (
  (
    name: [自定义事件],
    purpose: [自定义事件],
    requirement: [
      + 设计一个事件类`Rain`，包含下雨时的主要数据：雨量、持续时间，以及构造函数。
      + 设计一个能够和事件`Rain`相匹配的委托。
      + 设计一个类，包含`Rain`的对象，委托对象，引发事件的方法，处理事件的方法，该方法能够显示雨量和持续时间。
      + 设计其主类和`Main`方法，以演示程序的结果。
    ],
    result: [
      在C\#中，自定义事件和自定义委托是两个重要的概念。
      + 自定义委托：委托是一种类型，它可以封装一个或多个方法，并允许将这些方法作为参数传递给其他方法或存储在变量中。自定义委托可以定义一个新的委托类型，以便在代码中使用。定义一个委托需要指定其返回类型和参数列表，例如：
      + 自定义事件：事件是一种机制，用于在对象之间传递消息，以便在某些情况下触发相应的操作。自定义事件可以定义一个新的事件类型，以便在代码中使用。定义一个事件需要使用关键字`event`，并指定其委托类型，例如：
      + 委托和事件的使用：自定义委托可以用于将方法作为参数传递给其他方法，以便在适当的时候调用它们。自定义事件可以用于在对象之间传递消息，以便在某些情况下触发相应的操作。使用自定义委托和事件可以使代码更加模块化和可重用。

      自定义委托和事件是C\#中非常重要的概念，可以帮助我们更好地组织代码并实现更好的封装和可重用性。

      一个常见的需要自定义事件的实际例子是GUI编程中的按钮点击事件。在GUI编程中，通常需要在用户点击按钮时执行一些操作，比如弹出对话框、刷新页面等等。为了实现这个功能，我们可以自定义一个按钮点击事件，让它在用户点击按钮时触发相应的操作。

      具体步骤如下：

      + 定义一个委托类型，用于封装处理按钮点击事件的方法。例如：
        `public delegate void ButtonClickEventHandler(object sender, EventArgs e);`
      + 在按钮类中定义一个事件，用于触发按钮点击事件。例如：
        `public event ButtonClickEventHandler Click;`
      + 在按钮类中实现按钮的点击操作，并在点击时触发按钮点击事件。例如：
        `
        protected virtual void OnClick(EventArgs e)
        {
            if (Click != null)
            {
                Click(this, e);
            }
        }
        `
      + 在使用按钮的地方，订阅按钮的点击事件，并在事件处理方法中编写相应的逻辑。例如：
        `
        Button button = new Button();
        button.Click += new ButtonClickEventHandler(OnButtonClick);

        private void OnButtonClick(object sender, EventArgs e)
        {
            // 处理按钮点击事件的逻辑
        }
        `

      通过自定义事件，我们可以将按钮的点击事件和处理逻辑分离开来，使代码更加清晰和易于维护。同时，我们还可以在需要的时候添加或删除事件处理方法，以适应不同的需求。
    ]
  ),
)
